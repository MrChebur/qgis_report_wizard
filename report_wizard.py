# -*- coding: utf-8 -*-
"""
/***************************************************************************
 reportWizard
                                 A QGIS plugin
 Quick  markdown and html reports generation 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-21
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Enrico Ferreguti
        email                : enricofer@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from typing import OrderedDict
from qgis.PyQt.QtCore import QSize, QSettings, QTranslator, QCoreApplication, QFileInfo, Qt, QByteArray, QBuffer, QIODevice
from qgis.PyQt.QtGui import QIcon, QImage, QPainter, QRegion, QBitmap, QPixmap
from qgis.PyQt.QtWidgets import QAction, QFileDialog

from PyQt5.Qsci import QsciScintilla, QsciLexerHTML, QsciLexerMarkdown

from qgis.gui import QgsMapCanvas
from qgis.core import (
    QgsMapRendererJob,
    QgsMapRendererParallelJob,
    QgsExpressionContextUtils,
    QgsProject,
    QgsMapLayer,
    QgsVectorLayer,
    QgsRectangle,
    QgsGeometry,
    QgsLayoutExporter,
    QgsUnitTypes
)

import tempfile
import os

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
import os.path

from jinja2 import Environment, PackageLoader, select_autoescape, FileSystemLoader
from jinja2 import evalcontextfilter, Markup, escape

from secretary import Renderer

class reportWizard:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.exporter = canvas_image_exporter(iface.mapCanvas())
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'reportWizard_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Report wizard')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('reportWizard', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/report_wizard/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Report wizard'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        mdNameInfo = QFileInfo(QFileDialog.getOpenFileName(
            None,
            "Open a template",
            None,
            "templates(*.md *.odt)")[0]
        )
        dd = mdNameInfo.absoluteDir().absolutePath()
        print (dd)

        if mdNameInfo:
            
            #project_vars = {k: QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable(k) for k in QgsExpressionContextUtils.projectScope(QgsProject.instance()).variableNames()}
            project_vars = {}
            for k in QgsExpressionContextUtils.projectScope(QgsProject.instance()).variableNames():
                print(k)
                if k in ('layers'):
                    continue
                project_vars[k] = QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable(k) 
                print(project_vars[k])
            global_vars = {k: QgsExpressionContextUtils.globalScope().variable(k) for k in QgsExpressionContextUtils.globalScope().variableNames()}
            
            layers = []
            for layername,layer in QgsProject.instance().mapLayers().items():
                layers.append ({
                    "layer":layer,
                    "name": layer.name(),
                    "image": "image:layer:%s" % layer.id(),
                    "id": layer.id(),
                    "source": layer.publicSource(),
                    "extent": layer.extent().asWktCoordinates(),
                })
                
            layouts = []
            for layout in QgsProject.instance().layoutManager().printLayouts():
                layout_def = {
                    "layout": layout,
                    "name": layout.name(),
                    "image": "image:layout:%s" % layout.name(),
                    "atlas": layout.atlas().coverageLayer().id()  if layout.atlas().enabled() else None
                    #"atlas": None
                }
                #if layout.atlas().enabled():
                #    atlas_feats = []

                #    has_feats = layout.atlas().next()
                #    while has_feats:
                #        current_fid = layout.atlas().currentFeatureNumber()
                #        atlas_feats.append("image:feature_layout:%s:%d" % (layout.name(),current_fid))
                #        has_feats = layout.atlas().next()
                #    layout_def["atlas"] = atlas_feats
                #else:
                #    print("NO ATLAS", layout.name(), layout.atlas().enabled())
                layouts.append (layout_def)

            #atlas_refs = []
            #for layout in layouts:
            #    for layerid in QgsProject.instance().mapLayers():
            #        if layerid == layout["atlas"]:
            #            atlas_def = {
            #                "name": layout["name"]
            #            }
            #            atlas_feats=[]
                        
            #            for feat in QgsProject.instance().mapLayer(layerid).getFeatures():
            #                res = layout["layout"].atlas().seekTo(feat)
            #                if res:
            #                    atlas_feats.append({
            #                        "image": "image:feature_layout:%s:%d" % (layout["name"],feat.id()),
            #                        #"page_name": To be calculated by layout.atlas().pageNameExpression()
            #                    })
            #            atlas_def["pages"] = atlas_feats
            #            atlas_refs.append(atlas_def)


            feat_dicts = []
            print ("ACTIVE LAYER", self.iface.activeLayer())
            if self.iface.activeLayer():
                layer = self.iface.activeLayer()
                #atlas_refs = []
                #for layout in layouts:
                #    if layer.id == layout["atlas"]:
                #        atlas_refs.append(layout)
                feats = layer.selectedFeatures()
                if not feats:
                    feats = layer.getFeatures()
                print ("FIDS", feats)
                for feat in feats: #Iterator?
                    f_dict = {
                        "id": feat.id(),
                        "obj": feat,
                        "geom": feat.geometry(),
                        "canvas": "image:feature_canvas:%s:%d" % (layer.id(),feat.id())
                    }
                    #for atlas in atlas_refs:
                    #    feat_dicts[atlas["name"]] = "image:feature_layout:%s:%d" % (atlas,feat.id())
                    attributes = {}
                    for field in layer.fields().toList():
                        attributes[field.name()] = feat[field.name()]
                    f_dict["attributes"] = attributes
                    feat_dicts.append(f_dict)
            else:
                feat_dicts = []

            print ("FEATS", feat_dicts)

            if mdNameInfo.suffix() == 'md':
                env = Environment(
                    loader=FileSystemLoader('/'),
                    autoescape=select_autoescape(['html', 'xml']),
                )
                self.exporter = canvas_image_exporter(self.iface.mapCanvas())
                env.filters["image"] = self.canvas_image
                template = env.get_template(mdNameInfo.absoluteFilePath())
                result = template.render(layers=layers, project=project_vars, globals=global_vars, layer = feat_dicts )
                output = open(os.path.join(dd, 'rendered_document.md'), 'w')
                output.write(result)
                
            elif mdNameInfo.suffix() == 'odt':
                engine = Renderer()
                
                @engine.media_loader
                def qgis_images_loader(value,dpi=100,theme=None,around_border=0.1,mimetype="image/png",filter=None,**kwargs):
                    print ("image value",value, kwargs)
                    image_metadata = value["canvas"].split(":")
                    print ("image metadata",image_metadata)
                    if not 'svg:width' in kwargs['frame_attrs']:
                        print ("NO svg:width!")
                        return
                    
                    units = kwargs['frame_attrs']['svg:width'][-2:]
                    if units == "cm":
                        factor = 2.54
                    elif units == "in":
                        factor = 1
                    elif units == "mm":
                        factor = 25.4
                    
                    xsize = int(float(kwargs['frame_attrs']['svg:width'][:-2])/factor*dpi)
                    ysize = int(float(kwargs['frame_attrs']['svg:height'][:-2])/factor*dpi)

                    img_temppath = tempfile.NamedTemporaryFile(suffix=".png",delete=False).name
                    
                    if image_metadata[0] == 'image':
                        if image_metadata[1] == 'feature_canvas':
                            layer = QgsProject.instance().mapLayer(image_metadata[2])
                            feature = layer.getFeature(int(image_metadata[3]))
                            img = self.canvas_image(feature.geometry(),xsize=xsize,ysize=ysize)
                            img.save(img_temppath)
                            
                        elif image_metadata[1] == 'layer':
                            layer = QgsProject.instance().mapLayer(image_metadata[2])
                            img = self.canvas_image(layer.extent(),xsize=xsize,ysize=ysize,theme=layer)
                            img.save(img_temppath)
                            
                        elif image_metadata[1] in ('layout', 'feature_layout'):
                            #https://anitagraser.com/pyqgis-101-introduction-to-qgis-python-programming-for-non-programmers/pyqgis-101-exporting-layouts/
                            manager = QgsProject.instance().layoutManager()
                            layout = manager.layoutByName(image_metadata[2])
                            if image_metadata[1] == 'feature_layout':
                                layout.atlas().seekTo(int(image_metadata[3]))
                                print ("SEEKto", image_metadata[3])
                                layout.atlas().refreshCurrentFeature()
                            exporter = QgsLayoutExporter(layout)
                            print ("UNITS",layout.pageCollection().page(0).pageSize() )
                            aspect_ratio = layout.pageCollection().page(0).pageSize().width()/layout.pageCollection().page(0).pageSize().height()
                            settings = exporter.ImageExportSettings()
                            print (settings.imageSize)
                            if xsize>ysize:
                                ysize = xsize*aspect_ratio
                            else:
                                xsize = ysize*aspect_ratio
                            settings.imageSize = QSize(xsize ,ysize)
                            settings.dpi = dpi
                            settings.cropToContents = False
                            #settings.pages = [0]
                            print ( xsize, ysize, settings.imageSize, settings.dpi)
                            res = exporter.exportToImage(img_temppath, settings)
                            print ("LAYOUT EXPORT RESULT",res, exporter.errorFile())
                            
                        print (img_temppath)
                        return (open(img_temppath, 'rb'), mimetype)
                        
                result = engine.render(mdNameInfo.absoluteFilePath(), layouts=layouts, layers=layers, project=project_vars, globals=global_vars, features = feat_dicts )

                with open(os.path.join(dd, 'rendered_document.odt'), 'wb') as output:
                    output.write(result)
                    output.flush()

    def canvas_image(self,value,xsize=150,ysize=150,theme=None,around_border=0.1):
        if isinstance(value, QgsRectangle):
            bb = value
        elif isinstance(value, QgsGeometry):
            bb = value.boundingBox()
        else:
            bb = self.iface.mapCanvas().extent()
        img = self.exporter.image_shot(bb,xsize,ysize,theme,around_border)
        #print (str(base64_img))
        return img


    def canvas_base64_image(self,value,xsize=150,ysize=150,theme=None,around_border=0.1):
        if isinstance(value, QgsRectangle):
            bb = value
        elif isinstance(value, QgsGeometry):
            bb = value.boundingBox()
        else:
            bb = self.iface.mapCanvas().extent()
        base64_img = self.exporter.base64_shot(bb,xsize,ysize,theme,around_border)
        #print (str(base64_img))
        return base64_img


class canvas_image_exporter:

    def __init__(self, main_canvas):
        self.main_canvas = main_canvas
        self.canvas = QgsMapCanvas()
        self.canvas.setCanvasColor(Qt.white)
        self.canvas.setLayers(self.main_canvas.mapSettings().layers())
        self.canvas.refresh()
        self.canvas.update()
        self.settings = self.main_canvas.mapSettings()

    def image_shot(self, extent, xsize, ysize,theme,around_border):
        #self.canvas.resize(xsize,ysize) #QSize(xsize,ysize)
        if theme:
            if isinstance(theme, str):
                self.canvas.setTheme(theme)
            elif issubclass(type(theme),QgsMapLayer):
                self.canvas.setLayers([theme])
            else:
                self.canvas.setLayers(self.main_canvas.layers())
        if xsize >= ysize:
            dim = extent.xMaximum() - extent.xMinimum()
        else:
            dim = extent.yMaximum() - extent.yMinimum()
        dim = dim*around_border
        extent.grow(dim)
        self.canvas.setExtent(extent)
        self.canvas.refresh()
        self.canvas.update()
        mapSettings = self.canvas.mapSettings()
        mapSettings.setOutputSize( QSize(xsize,ysize ) )
        job = QgsMapRendererParallelJob(mapSettings)
        job.start()
        job.waitForFinished()
        image = job.renderedImage()
        return image

    def base64_shot(self, extent, xsize, ysize, theme, around_border):
        image = self.image_shot(extent,xsize,ysize,theme,around_border)

        #canvas_image = QImage(image.width(), image.height(), QImage.Format_ARGB32)
        #canvas_image.fill(Qt.transparent)
        #p = QPainter(canvas_image)
        #mask = image.createMaskFromColor(QColor(255, 255, 255).rgb(), Qt.MaskInColor)
        #p.setClipRegion(QRegion(QBitmap(QPixmap.fromImage(mask))))
        #p.drawPixmap(0, 0, QPixmap.fromImage(image))
        #p.end()

        ba = QByteArray()
        buffer = QBuffer(ba)
        buffer.open(QIODevice.WriteOnly)
        image.save(buffer, 'PNG')
        base64_data = ba.toBase64().data()

        return "data:image/png;base64," + str(base64_data, 'UTF-8')
